// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dissociable/Couploan/ent/predicate"
	"github.com/Dissociable/Couploan/ent/proxy"
	"github.com/Dissociable/Couploan/ent/proxyprovider"
)

// ProxyProviderUpdate is the builder for updating ProxyProvider entities.
type ProxyProviderUpdate struct {
	config
	hooks    []Hook
	mutation *ProxyProviderMutation
}

// Where appends a list predicates to the ProxyProviderUpdate builder.
func (ppu *ProxyProviderUpdate) Where(ps ...predicate.ProxyProvider) *ProxyProviderUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetName sets the "name" field.
func (ppu *ProxyProviderUpdate) SetName(s string) *ProxyProviderUpdate {
	ppu.mutation.SetName(s)
	return ppu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ppu *ProxyProviderUpdate) SetNillableName(s *string) *ProxyProviderUpdate {
	if s != nil {
		ppu.SetName(*s)
	}
	return ppu
}

// SetUsername sets the "username" field.
func (ppu *ProxyProviderUpdate) SetUsername(s string) *ProxyProviderUpdate {
	ppu.mutation.SetUsername(s)
	return ppu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ppu *ProxyProviderUpdate) SetNillableUsername(s *string) *ProxyProviderUpdate {
	if s != nil {
		ppu.SetUsername(*s)
	}
	return ppu
}

// SetPassword sets the "password" field.
func (ppu *ProxyProviderUpdate) SetPassword(s string) *ProxyProviderUpdate {
	ppu.mutation.SetPassword(s)
	return ppu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ppu *ProxyProviderUpdate) SetNillablePassword(s *string) *ProxyProviderUpdate {
	if s != nil {
		ppu.SetPassword(*s)
	}
	return ppu
}

// SetServiceType sets the "service_type" field.
func (ppu *ProxyProviderUpdate) SetServiceType(s string) *ProxyProviderUpdate {
	ppu.mutation.SetServiceType(s)
	return ppu
}

// SetNillableServiceType sets the "service_type" field if the given value is not nil.
func (ppu *ProxyProviderUpdate) SetNillableServiceType(s *string) *ProxyProviderUpdate {
	if s != nil {
		ppu.SetServiceType(*s)
	}
	return ppu
}

// AddProxyIDs adds the "proxy" edge to the Proxy entity by IDs.
func (ppu *ProxyProviderUpdate) AddProxyIDs(ids ...int) *ProxyProviderUpdate {
	ppu.mutation.AddProxyIDs(ids...)
	return ppu
}

// AddProxy adds the "proxy" edges to the Proxy entity.
func (ppu *ProxyProviderUpdate) AddProxy(p ...*Proxy) *ProxyProviderUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.AddProxyIDs(ids...)
}

// Mutation returns the ProxyProviderMutation object of the builder.
func (ppu *ProxyProviderUpdate) Mutation() *ProxyProviderMutation {
	return ppu.mutation
}

// ClearProxy clears all "proxy" edges to the Proxy entity.
func (ppu *ProxyProviderUpdate) ClearProxy() *ProxyProviderUpdate {
	ppu.mutation.ClearProxy()
	return ppu
}

// RemoveProxyIDs removes the "proxy" edge to Proxy entities by IDs.
func (ppu *ProxyProviderUpdate) RemoveProxyIDs(ids ...int) *ProxyProviderUpdate {
	ppu.mutation.RemoveProxyIDs(ids...)
	return ppu
}

// RemoveProxy removes "proxy" edges to Proxy entities.
func (ppu *ProxyProviderUpdate) RemoveProxy(p ...*Proxy) *ProxyProviderUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.RemoveProxyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *ProxyProviderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *ProxyProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *ProxyProviderUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *ProxyProviderUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ppu *ProxyProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(proxyprovider.Table, proxyprovider.Columns, sqlgraph.NewFieldSpec(proxyprovider.FieldID, field.TypeInt))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.Name(); ok {
		_spec.SetField(proxyprovider.FieldName, field.TypeString, value)
	}
	if value, ok := ppu.mutation.Username(); ok {
		_spec.SetField(proxyprovider.FieldUsername, field.TypeString, value)
	}
	if value, ok := ppu.mutation.Password(); ok {
		_spec.SetField(proxyprovider.FieldPassword, field.TypeString, value)
	}
	if value, ok := ppu.mutation.ServiceType(); ok {
		_spec.SetField(proxyprovider.FieldServiceType, field.TypeString, value)
	}
	if ppu.mutation.ProxyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proxyprovider.ProxyTable,
			Columns: []string{proxyprovider.ProxyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.RemovedProxyIDs(); len(nodes) > 0 && !ppu.mutation.ProxyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proxyprovider.ProxyTable,
			Columns: []string{proxyprovider.ProxyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.ProxyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proxyprovider.ProxyTable,
			Columns: []string{proxyprovider.ProxyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proxyprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// ProxyProviderUpdateOne is the builder for updating a single ProxyProvider entity.
type ProxyProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProxyProviderMutation
}

// SetName sets the "name" field.
func (ppuo *ProxyProviderUpdateOne) SetName(s string) *ProxyProviderUpdateOne {
	ppuo.mutation.SetName(s)
	return ppuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ppuo *ProxyProviderUpdateOne) SetNillableName(s *string) *ProxyProviderUpdateOne {
	if s != nil {
		ppuo.SetName(*s)
	}
	return ppuo
}

// SetUsername sets the "username" field.
func (ppuo *ProxyProviderUpdateOne) SetUsername(s string) *ProxyProviderUpdateOne {
	ppuo.mutation.SetUsername(s)
	return ppuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ppuo *ProxyProviderUpdateOne) SetNillableUsername(s *string) *ProxyProviderUpdateOne {
	if s != nil {
		ppuo.SetUsername(*s)
	}
	return ppuo
}

// SetPassword sets the "password" field.
func (ppuo *ProxyProviderUpdateOne) SetPassword(s string) *ProxyProviderUpdateOne {
	ppuo.mutation.SetPassword(s)
	return ppuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ppuo *ProxyProviderUpdateOne) SetNillablePassword(s *string) *ProxyProviderUpdateOne {
	if s != nil {
		ppuo.SetPassword(*s)
	}
	return ppuo
}

// SetServiceType sets the "service_type" field.
func (ppuo *ProxyProviderUpdateOne) SetServiceType(s string) *ProxyProviderUpdateOne {
	ppuo.mutation.SetServiceType(s)
	return ppuo
}

// SetNillableServiceType sets the "service_type" field if the given value is not nil.
func (ppuo *ProxyProviderUpdateOne) SetNillableServiceType(s *string) *ProxyProviderUpdateOne {
	if s != nil {
		ppuo.SetServiceType(*s)
	}
	return ppuo
}

// AddProxyIDs adds the "proxy" edge to the Proxy entity by IDs.
func (ppuo *ProxyProviderUpdateOne) AddProxyIDs(ids ...int) *ProxyProviderUpdateOne {
	ppuo.mutation.AddProxyIDs(ids...)
	return ppuo
}

// AddProxy adds the "proxy" edges to the Proxy entity.
func (ppuo *ProxyProviderUpdateOne) AddProxy(p ...*Proxy) *ProxyProviderUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.AddProxyIDs(ids...)
}

// Mutation returns the ProxyProviderMutation object of the builder.
func (ppuo *ProxyProviderUpdateOne) Mutation() *ProxyProviderMutation {
	return ppuo.mutation
}

// ClearProxy clears all "proxy" edges to the Proxy entity.
func (ppuo *ProxyProviderUpdateOne) ClearProxy() *ProxyProviderUpdateOne {
	ppuo.mutation.ClearProxy()
	return ppuo
}

// RemoveProxyIDs removes the "proxy" edge to Proxy entities by IDs.
func (ppuo *ProxyProviderUpdateOne) RemoveProxyIDs(ids ...int) *ProxyProviderUpdateOne {
	ppuo.mutation.RemoveProxyIDs(ids...)
	return ppuo
}

// RemoveProxy removes "proxy" edges to Proxy entities.
func (ppuo *ProxyProviderUpdateOne) RemoveProxy(p ...*Proxy) *ProxyProviderUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.RemoveProxyIDs(ids...)
}

// Where appends a list predicates to the ProxyProviderUpdate builder.
func (ppuo *ProxyProviderUpdateOne) Where(ps ...predicate.ProxyProvider) *ProxyProviderUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *ProxyProviderUpdateOne) Select(field string, fields ...string) *ProxyProviderUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated ProxyProvider entity.
func (ppuo *ProxyProviderUpdateOne) Save(ctx context.Context) (*ProxyProvider, error) {
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *ProxyProviderUpdateOne) SaveX(ctx context.Context) *ProxyProvider {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *ProxyProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *ProxyProviderUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ppuo *ProxyProviderUpdateOne) sqlSave(ctx context.Context) (_node *ProxyProvider, err error) {
	_spec := sqlgraph.NewUpdateSpec(proxyprovider.Table, proxyprovider.Columns, sqlgraph.NewFieldSpec(proxyprovider.FieldID, field.TypeInt))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProxyProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proxyprovider.FieldID)
		for _, f := range fields {
			if !proxyprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != proxyprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.Name(); ok {
		_spec.SetField(proxyprovider.FieldName, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.Username(); ok {
		_spec.SetField(proxyprovider.FieldUsername, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.Password(); ok {
		_spec.SetField(proxyprovider.FieldPassword, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.ServiceType(); ok {
		_spec.SetField(proxyprovider.FieldServiceType, field.TypeString, value)
	}
	if ppuo.mutation.ProxyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proxyprovider.ProxyTable,
			Columns: []string{proxyprovider.ProxyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.RemovedProxyIDs(); len(nodes) > 0 && !ppuo.mutation.ProxyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proxyprovider.ProxyTable,
			Columns: []string{proxyprovider.ProxyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.ProxyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proxyprovider.ProxyTable,
			Columns: []string{proxyprovider.ProxyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProxyProvider{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proxyprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}
