// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/Dissociable/Couploan/ent/proxy"
	"github.com/Dissociable/Couploan/ent/schema"
	"github.com/Dissociable/Couploan/ent/user"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	proxyFields := schema.Proxy{}.Fields()
	_ = proxyFields
	// proxyDescRotating is the schema descriptor for rotating field.
	proxyDescRotating := proxyFields[5].Descriptor()
	// proxy.DefaultRotating holds the default value on creation for the rotating field.
	proxy.DefaultRotating = proxyDescRotating.Default.(bool)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescContact is the schema descriptor for contact field.
	userDescContact := userFields[2].Descriptor()
	// user.ContactValidator is a validator for the "contact" field. It is called by the builders before save.
	user.ContactValidator = userDescContact.Validators[0].(func(string) error)
	// userDescKey is the schema descriptor for key field.
	userDescKey := userFields[4].Descriptor()
	// user.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	user.KeyValidator = func() func(string) error {
		validators := userDescKey.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(key string) error {
			for _, fn := range fns {
				if err := fn(key); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescBalance is the schema descriptor for balance field.
	userDescBalance := userFields[5].Descriptor()
	// user.DefaultBalance holds the default value on creation for the balance field.
	user.DefaultBalance = userDescBalance.Default.(int)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[7].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
