// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dissociable/Couploan/ent/proxyprovider"
)

// ProxyProvider is the model entity for the ProxyProvider schema.
type ProxyProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// ServiceType holds the value of the "service_type" field.
	ServiceType string `json:"service_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProxyProviderQuery when eager-loading is set.
	Edges        ProxyProviderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProxyProviderEdges holds the relations/edges for other nodes in the graph.
type ProxyProviderEdges struct {
	// Proxy holds the value of the proxy edge.
	Proxy []*Proxy `json:"proxy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProxyOrErr returns the Proxy value or an error if the edge
// was not loaded in eager-loading.
func (e ProxyProviderEdges) ProxyOrErr() ([]*Proxy, error) {
	if e.loadedTypes[0] {
		return e.Proxy, nil
	}
	return nil, &NotLoadedError{edge: "proxy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProxyProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case proxyprovider.FieldID:
			values[i] = new(sql.NullInt64)
		case proxyprovider.FieldName, proxyprovider.FieldUsername, proxyprovider.FieldPassword, proxyprovider.FieldServiceType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProxyProvider fields.
func (pp *ProxyProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case proxyprovider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pp.ID = int(value.Int64)
		case proxyprovider.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pp.Name = value.String
			}
		case proxyprovider.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				pp.Username = value.String
			}
		case proxyprovider.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				pp.Password = value.String
			}
		case proxyprovider.FieldServiceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_type", values[i])
			} else if value.Valid {
				pp.ServiceType = value.String
			}
		default:
			pp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProxyProvider.
// This includes values selected through modifiers, order, etc.
func (pp *ProxyProvider) Value(name string) (ent.Value, error) {
	return pp.selectValues.Get(name)
}

// QueryProxy queries the "proxy" edge of the ProxyProvider entity.
func (pp *ProxyProvider) QueryProxy() *ProxyQuery {
	return NewProxyProviderClient(pp.config).QueryProxy(pp)
}

// Update returns a builder for updating this ProxyProvider.
// Note that you need to call ProxyProvider.Unwrap() before calling this method if this ProxyProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *ProxyProvider) Update() *ProxyProviderUpdateOne {
	return NewProxyProviderClient(pp.config).UpdateOne(pp)
}

// Unwrap unwraps the ProxyProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *ProxyProvider) Unwrap() *ProxyProvider {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProxyProvider is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *ProxyProvider) String() string {
	var builder strings.Builder
	builder.WriteString("ProxyProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("name=")
	builder.WriteString(pp.Name)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(pp.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(pp.Password)
	builder.WriteString(", ")
	builder.WriteString("service_type=")
	builder.WriteString(pp.ServiceType)
	builder.WriteByte(')')
	return builder.String()
}

// ProxyProviders is a parsable slice of ProxyProvider.
type ProxyProviders []*ProxyProvider
