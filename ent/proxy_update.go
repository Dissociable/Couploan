// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dissociable/Couploan/ent/predicate"
	"github.com/Dissociable/Couploan/ent/proxy"
)

// ProxyUpdate is the builder for updating Proxy entities.
type ProxyUpdate struct {
	config
	hooks    []Hook
	mutation *ProxyMutation
}

// Where appends a list predicates to the ProxyUpdate builder.
func (pu *ProxyUpdate) Where(ps ...predicate.Proxy) *ProxyUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetType sets the "type" field.
func (pu *ProxyUpdate) SetType(pr proxy.Type) *ProxyUpdate {
	pu.mutation.SetType(pr)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *ProxyUpdate) SetNillableType(pr *proxy.Type) *ProxyUpdate {
	if pr != nil {
		pu.SetType(*pr)
	}
	return pu
}

// SetIP sets the "ip" field.
func (pu *ProxyUpdate) SetIP(s string) *ProxyUpdate {
	pu.mutation.SetIP(s)
	return pu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (pu *ProxyUpdate) SetNillableIP(s *string) *ProxyUpdate {
	if s != nil {
		pu.SetIP(*s)
	}
	return pu
}

// SetPort sets the "port" field.
func (pu *ProxyUpdate) SetPort(u uint16) *ProxyUpdate {
	pu.mutation.ResetPort()
	pu.mutation.SetPort(u)
	return pu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (pu *ProxyUpdate) SetNillablePort(u *uint16) *ProxyUpdate {
	if u != nil {
		pu.SetPort(*u)
	}
	return pu
}

// AddPort adds u to the "port" field.
func (pu *ProxyUpdate) AddPort(u int16) *ProxyUpdate {
	pu.mutation.AddPort(u)
	return pu
}

// SetUsername sets the "username" field.
func (pu *ProxyUpdate) SetUsername(s string) *ProxyUpdate {
	pu.mutation.SetUsername(s)
	return pu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (pu *ProxyUpdate) SetNillableUsername(s *string) *ProxyUpdate {
	if s != nil {
		pu.SetUsername(*s)
	}
	return pu
}

// SetPassword sets the "password" field.
func (pu *ProxyUpdate) SetPassword(s string) *ProxyUpdate {
	pu.mutation.SetPassword(s)
	return pu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (pu *ProxyUpdate) SetNillablePassword(s *string) *ProxyUpdate {
	if s != nil {
		pu.SetPassword(*s)
	}
	return pu
}

// SetRotating sets the "rotating" field.
func (pu *ProxyUpdate) SetRotating(b bool) *ProxyUpdate {
	pu.mutation.SetRotating(b)
	return pu
}

// SetNillableRotating sets the "rotating" field if the given value is not nil.
func (pu *ProxyUpdate) SetNillableRotating(b *bool) *ProxyUpdate {
	if b != nil {
		pu.SetRotating(*b)
	}
	return pu
}

// Mutation returns the ProxyMutation object of the builder.
func (pu *ProxyUpdate) Mutation() *ProxyMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProxyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProxyUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProxyUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProxyUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProxyUpdate) check() error {
	if v, ok := pu.mutation.GetType(); ok {
		if err := proxy.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Proxy.type": %w`, err)}
		}
	}
	return nil
}

func (pu *ProxyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(proxy.Table, proxy.Columns, sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(proxy.FieldType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.IP(); ok {
		_spec.SetField(proxy.FieldIP, field.TypeString, value)
	}
	if value, ok := pu.mutation.Port(); ok {
		_spec.SetField(proxy.FieldPort, field.TypeUint16, value)
	}
	if value, ok := pu.mutation.AddedPort(); ok {
		_spec.AddField(proxy.FieldPort, field.TypeUint16, value)
	}
	if value, ok := pu.mutation.Username(); ok {
		_spec.SetField(proxy.FieldUsername, field.TypeString, value)
	}
	if value, ok := pu.mutation.Password(); ok {
		_spec.SetField(proxy.FieldPassword, field.TypeString, value)
	}
	if value, ok := pu.mutation.Rotating(); ok {
		_spec.SetField(proxy.FieldRotating, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proxy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProxyUpdateOne is the builder for updating a single Proxy entity.
type ProxyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProxyMutation
}

// SetType sets the "type" field.
func (puo *ProxyUpdateOne) SetType(pr proxy.Type) *ProxyUpdateOne {
	puo.mutation.SetType(pr)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillableType(pr *proxy.Type) *ProxyUpdateOne {
	if pr != nil {
		puo.SetType(*pr)
	}
	return puo
}

// SetIP sets the "ip" field.
func (puo *ProxyUpdateOne) SetIP(s string) *ProxyUpdateOne {
	puo.mutation.SetIP(s)
	return puo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillableIP(s *string) *ProxyUpdateOne {
	if s != nil {
		puo.SetIP(*s)
	}
	return puo
}

// SetPort sets the "port" field.
func (puo *ProxyUpdateOne) SetPort(u uint16) *ProxyUpdateOne {
	puo.mutation.ResetPort()
	puo.mutation.SetPort(u)
	return puo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillablePort(u *uint16) *ProxyUpdateOne {
	if u != nil {
		puo.SetPort(*u)
	}
	return puo
}

// AddPort adds u to the "port" field.
func (puo *ProxyUpdateOne) AddPort(u int16) *ProxyUpdateOne {
	puo.mutation.AddPort(u)
	return puo
}

// SetUsername sets the "username" field.
func (puo *ProxyUpdateOne) SetUsername(s string) *ProxyUpdateOne {
	puo.mutation.SetUsername(s)
	return puo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillableUsername(s *string) *ProxyUpdateOne {
	if s != nil {
		puo.SetUsername(*s)
	}
	return puo
}

// SetPassword sets the "password" field.
func (puo *ProxyUpdateOne) SetPassword(s string) *ProxyUpdateOne {
	puo.mutation.SetPassword(s)
	return puo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillablePassword(s *string) *ProxyUpdateOne {
	if s != nil {
		puo.SetPassword(*s)
	}
	return puo
}

// SetRotating sets the "rotating" field.
func (puo *ProxyUpdateOne) SetRotating(b bool) *ProxyUpdateOne {
	puo.mutation.SetRotating(b)
	return puo
}

// SetNillableRotating sets the "rotating" field if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillableRotating(b *bool) *ProxyUpdateOne {
	if b != nil {
		puo.SetRotating(*b)
	}
	return puo
}

// Mutation returns the ProxyMutation object of the builder.
func (puo *ProxyUpdateOne) Mutation() *ProxyMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProxyUpdate builder.
func (puo *ProxyUpdateOne) Where(ps ...predicate.Proxy) *ProxyUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProxyUpdateOne) Select(field string, fields ...string) *ProxyUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Proxy entity.
func (puo *ProxyUpdateOne) Save(ctx context.Context) (*Proxy, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProxyUpdateOne) SaveX(ctx context.Context) *Proxy {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProxyUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProxyUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProxyUpdateOne) check() error {
	if v, ok := puo.mutation.GetType(); ok {
		if err := proxy.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Proxy.type": %w`, err)}
		}
	}
	return nil
}

func (puo *ProxyUpdateOne) sqlSave(ctx context.Context) (_node *Proxy, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(proxy.Table, proxy.Columns, sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Proxy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proxy.FieldID)
		for _, f := range fields {
			if !proxy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != proxy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(proxy.FieldType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.IP(); ok {
		_spec.SetField(proxy.FieldIP, field.TypeString, value)
	}
	if value, ok := puo.mutation.Port(); ok {
		_spec.SetField(proxy.FieldPort, field.TypeUint16, value)
	}
	if value, ok := puo.mutation.AddedPort(); ok {
		_spec.AddField(proxy.FieldPort, field.TypeUint16, value)
	}
	if value, ok := puo.mutation.Username(); ok {
		_spec.SetField(proxy.FieldUsername, field.TypeString, value)
	}
	if value, ok := puo.mutation.Password(); ok {
		_spec.SetField(proxy.FieldPassword, field.TypeString, value)
	}
	if value, ok := puo.mutation.Rotating(); ok {
		_spec.SetField(proxy.FieldRotating, field.TypeBool, value)
	}
	_node = &Proxy{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proxy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
