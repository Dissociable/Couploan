// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dissociable/Couploan/ent/predicate"
	"github.com/Dissociable/Couploan/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetContact sets the "contact" field.
func (uu *UserUpdate) SetContact(s string) *UserUpdate {
	uu.mutation.SetContact(s)
	return uu
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (uu *UserUpdate) SetNillableContact(s *string) *UserUpdate {
	if s != nil {
		uu.SetContact(*s)
	}
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(u user.Role) *UserUpdate {
	uu.mutation.SetRole(u)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(u *user.Role) *UserUpdate {
	if u != nil {
		uu.SetRole(*u)
	}
	return uu
}

// SetKey sets the "key" field.
func (uu *UserUpdate) SetKey(s string) *UserUpdate {
	uu.mutation.SetKey(s)
	return uu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (uu *UserUpdate) SetNillableKey(s *string) *UserUpdate {
	if s != nil {
		uu.SetKey(*s)
	}
	return uu
}

// SetBalance sets the "balance" field.
func (uu *UserUpdate) SetBalance(i int) *UserUpdate {
	uu.mutation.ResetBalance()
	uu.mutation.SetBalance(i)
	return uu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBalance(i *int) *UserUpdate {
	if i != nil {
		uu.SetBalance(*i)
	}
	return uu
}

// AddBalance adds i to the "balance" field.
func (uu *UserUpdate) AddBalance(i int) *UserUpdate {
	uu.mutation.AddBalance(i)
	return uu
}

// SetExpiresAt sets the "expires_at" field.
func (uu *UserUpdate) SetExpiresAt(t time.Time) *UserUpdate {
	uu.mutation.SetExpiresAt(t)
	return uu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExpiresAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetExpiresAt(*t)
	}
	return uu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (uu *UserUpdate) ClearExpiresAt() *UserUpdate {
	uu.mutation.ClearExpiresAt()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Contact(); ok {
		if err := user.ContactValidator(v); err != nil {
			return &ValidationError{Name: "contact", err: fmt.Errorf(`ent: validator failed for field "User.contact": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Key(); ok {
		if err := user.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "User.key": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Contact(); ok {
		_spec.SetField(user.FieldContact, field.TypeString, value)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Key(); ok {
		_spec.SetField(user.FieldKey, field.TypeString, value)
	}
	if value, ok := uu.mutation.Balance(); ok {
		_spec.SetField(user.FieldBalance, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedBalance(); ok {
		_spec.AddField(user.FieldBalance, field.TypeInt, value)
	}
	if value, ok := uu.mutation.ExpiresAt(); ok {
		_spec.SetField(user.FieldExpiresAt, field.TypeTime, value)
	}
	if uu.mutation.ExpiresAtCleared() {
		_spec.ClearField(user.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetContact sets the "contact" field.
func (uuo *UserUpdateOne) SetContact(s string) *UserUpdateOne {
	uuo.mutation.SetContact(s)
	return uuo
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableContact(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetContact(*s)
	}
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(u user.Role) *UserUpdateOne {
	uuo.mutation.SetRole(u)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(u *user.Role) *UserUpdateOne {
	if u != nil {
		uuo.SetRole(*u)
	}
	return uuo
}

// SetKey sets the "key" field.
func (uuo *UserUpdateOne) SetKey(s string) *UserUpdateOne {
	uuo.mutation.SetKey(s)
	return uuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableKey(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetKey(*s)
	}
	return uuo
}

// SetBalance sets the "balance" field.
func (uuo *UserUpdateOne) SetBalance(i int) *UserUpdateOne {
	uuo.mutation.ResetBalance()
	uuo.mutation.SetBalance(i)
	return uuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBalance(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetBalance(*i)
	}
	return uuo
}

// AddBalance adds i to the "balance" field.
func (uuo *UserUpdateOne) AddBalance(i int) *UserUpdateOne {
	uuo.mutation.AddBalance(i)
	return uuo
}

// SetExpiresAt sets the "expires_at" field.
func (uuo *UserUpdateOne) SetExpiresAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetExpiresAt(t)
	return uuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExpiresAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetExpiresAt(*t)
	}
	return uuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (uuo *UserUpdateOne) ClearExpiresAt() *UserUpdateOne {
	uuo.mutation.ClearExpiresAt()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Contact(); ok {
		if err := user.ContactValidator(v); err != nil {
			return &ValidationError{Name: "contact", err: fmt.Errorf(`ent: validator failed for field "User.contact": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Key(); ok {
		if err := user.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "User.key": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Contact(); ok {
		_spec.SetField(user.FieldContact, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Key(); ok {
		_spec.SetField(user.FieldKey, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Balance(); ok {
		_spec.SetField(user.FieldBalance, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedBalance(); ok {
		_spec.AddField(user.FieldBalance, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.ExpiresAt(); ok {
		_spec.SetField(user.FieldExpiresAt, field.TypeTime, value)
	}
	if uuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(user.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
