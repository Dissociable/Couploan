// Code generated by ent, DO NOT EDIT.

package proxyprovider

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Dissociable/Couploan/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEQ(FieldName, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEQ(FieldPassword, v))
}

// ServiceType applies equality check predicate on the "service_type" field. It's identical to ServiceTypeEQ.
func ServiceType(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEQ(FieldServiceType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldContainsFold(FieldName, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldContainsFold(FieldPassword, v))
}

// ServiceTypeEQ applies the EQ predicate on the "service_type" field.
func ServiceTypeEQ(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEQ(FieldServiceType, v))
}

// ServiceTypeNEQ applies the NEQ predicate on the "service_type" field.
func ServiceTypeNEQ(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldNEQ(FieldServiceType, v))
}

// ServiceTypeIn applies the In predicate on the "service_type" field.
func ServiceTypeIn(vs ...string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldIn(FieldServiceType, vs...))
}

// ServiceTypeNotIn applies the NotIn predicate on the "service_type" field.
func ServiceTypeNotIn(vs ...string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldNotIn(FieldServiceType, vs...))
}

// ServiceTypeGT applies the GT predicate on the "service_type" field.
func ServiceTypeGT(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldGT(FieldServiceType, v))
}

// ServiceTypeGTE applies the GTE predicate on the "service_type" field.
func ServiceTypeGTE(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldGTE(FieldServiceType, v))
}

// ServiceTypeLT applies the LT predicate on the "service_type" field.
func ServiceTypeLT(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldLT(FieldServiceType, v))
}

// ServiceTypeLTE applies the LTE predicate on the "service_type" field.
func ServiceTypeLTE(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldLTE(FieldServiceType, v))
}

// ServiceTypeContains applies the Contains predicate on the "service_type" field.
func ServiceTypeContains(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldContains(FieldServiceType, v))
}

// ServiceTypeHasPrefix applies the HasPrefix predicate on the "service_type" field.
func ServiceTypeHasPrefix(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldHasPrefix(FieldServiceType, v))
}

// ServiceTypeHasSuffix applies the HasSuffix predicate on the "service_type" field.
func ServiceTypeHasSuffix(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldHasSuffix(FieldServiceType, v))
}

// ServiceTypeEqualFold applies the EqualFold predicate on the "service_type" field.
func ServiceTypeEqualFold(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldEqualFold(FieldServiceType, v))
}

// ServiceTypeContainsFold applies the ContainsFold predicate on the "service_type" field.
func ServiceTypeContainsFold(v string) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.FieldContainsFold(FieldServiceType, v))
}

// HasProxy applies the HasEdge predicate on the "proxy" edge.
func HasProxy() predicate.ProxyProvider {
	return predicate.ProxyProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProxyTable, ProxyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProxyWith applies the HasEdge predicate on the "proxy" edge with a given conditions (other predicates).
func HasProxyWith(preds ...predicate.Proxy) predicate.ProxyProvider {
	return predicate.ProxyProvider(func(s *sql.Selector) {
		step := newProxyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProxyProvider) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProxyProvider) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProxyProvider) predicate.ProxyProvider {
	return predicate.ProxyProvider(sql.NotPredicates(p))
}
