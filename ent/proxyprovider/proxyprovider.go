// Code generated by ent, DO NOT EDIT.

package proxyprovider

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the proxyprovider type in the database.
	Label = "proxy_provider"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldServiceType holds the string denoting the service_type field in the database.
	FieldServiceType = "service_type"
	// EdgeProxy holds the string denoting the proxy edge name in mutations.
	EdgeProxy = "proxy"
	// Table holds the table name of the proxyprovider in the database.
	Table = "proxy_providers"
	// ProxyTable is the table that holds the proxy relation/edge.
	ProxyTable = "proxies"
	// ProxyInverseTable is the table name for the Proxy entity.
	// It exists in this package in order to avoid circular dependency with the "proxy" package.
	ProxyInverseTable = "proxies"
	// ProxyColumn is the table column denoting the proxy relation/edge.
	ProxyColumn = "proxy_proxy_provider"
)

// Columns holds all SQL columns for proxyprovider fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldUsername,
	FieldPassword,
	FieldServiceType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ProxyProvider queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByServiceType orders the results by the service_type field.
func ByServiceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceType, opts...).ToFunc()
}

// ByProxyCount orders the results by proxy count.
func ByProxyCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProxyStep(), opts...)
	}
}

// ByProxy orders the results by proxy terms.
func ByProxy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProxyStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProxyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProxyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ProxyTable, ProxyColumn),
	)
}
