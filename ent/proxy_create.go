// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dissociable/Couploan/ent/proxy"
)

// ProxyCreate is the builder for creating a Proxy entity.
type ProxyCreate struct {
	config
	mutation *ProxyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (pc *ProxyCreate) SetType(pr proxy.Type) *ProxyCreate {
	pc.mutation.SetType(pr)
	return pc
}

// SetIP sets the "ip" field.
func (pc *ProxyCreate) SetIP(s string) *ProxyCreate {
	pc.mutation.SetIP(s)
	return pc
}

// SetPort sets the "port" field.
func (pc *ProxyCreate) SetPort(u uint16) *ProxyCreate {
	pc.mutation.SetPort(u)
	return pc
}

// SetUsername sets the "username" field.
func (pc *ProxyCreate) SetUsername(s string) *ProxyCreate {
	pc.mutation.SetUsername(s)
	return pc
}

// SetPassword sets the "password" field.
func (pc *ProxyCreate) SetPassword(s string) *ProxyCreate {
	pc.mutation.SetPassword(s)
	return pc
}

// SetRotating sets the "rotating" field.
func (pc *ProxyCreate) SetRotating(b bool) *ProxyCreate {
	pc.mutation.SetRotating(b)
	return pc
}

// SetNillableRotating sets the "rotating" field if the given value is not nil.
func (pc *ProxyCreate) SetNillableRotating(b *bool) *ProxyCreate {
	if b != nil {
		pc.SetRotating(*b)
	}
	return pc
}

// Mutation returns the ProxyMutation object of the builder.
func (pc *ProxyCreate) Mutation() *ProxyMutation {
	return pc.mutation
}

// Save creates the Proxy in the database.
func (pc *ProxyCreate) Save(ctx context.Context) (*Proxy, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProxyCreate) SaveX(ctx context.Context) *Proxy {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProxyCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProxyCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProxyCreate) defaults() {
	if _, ok := pc.mutation.Rotating(); !ok {
		v := proxy.DefaultRotating
		pc.mutation.SetRotating(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProxyCreate) check() error {
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Proxy.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := proxy.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Proxy.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "Proxy.ip"`)}
	}
	if _, ok := pc.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New(`ent: missing required field "Proxy.port"`)}
	}
	if _, ok := pc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Proxy.username"`)}
	}
	if _, ok := pc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Proxy.password"`)}
	}
	if _, ok := pc.mutation.Rotating(); !ok {
		return &ValidationError{Name: "rotating", err: errors.New(`ent: missing required field "Proxy.rotating"`)}
	}
	return nil
}

func (pc *ProxyCreate) sqlSave(ctx context.Context) (*Proxy, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProxyCreate) createSpec() (*Proxy, *sqlgraph.CreateSpec) {
	var (
		_node = &Proxy{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(proxy.Table, sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(proxy.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.IP(); ok {
		_spec.SetField(proxy.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := pc.mutation.Port(); ok {
		_spec.SetField(proxy.FieldPort, field.TypeUint16, value)
		_node.Port = value
	}
	if value, ok := pc.mutation.Username(); ok {
		_spec.SetField(proxy.FieldUsername, field.TypeString, value)
		_node.Username = &value
	}
	if value, ok := pc.mutation.Password(); ok {
		_spec.SetField(proxy.FieldPassword, field.TypeString, value)
		_node.Password = &value
	}
	if value, ok := pc.mutation.Rotating(); ok {
		_spec.SetField(proxy.FieldRotating, field.TypeBool, value)
		_node.Rotating = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Proxy.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProxyUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (pc *ProxyCreate) OnConflict(opts ...sql.ConflictOption) *ProxyUpsertOne {
	pc.conflict = opts
	return &ProxyUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Proxy.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProxyCreate) OnConflictColumns(columns ...string) *ProxyUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProxyUpsertOne{
		create: pc,
	}
}

type (
	// ProxyUpsertOne is the builder for "upsert"-ing
	//  one Proxy node.
	ProxyUpsertOne struct {
		create *ProxyCreate
	}

	// ProxyUpsert is the "OnConflict" setter.
	ProxyUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *ProxyUpsert) SetType(v proxy.Type) *ProxyUpsert {
	u.Set(proxy.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ProxyUpsert) UpdateType() *ProxyUpsert {
	u.SetExcluded(proxy.FieldType)
	return u
}

// SetIP sets the "ip" field.
func (u *ProxyUpsert) SetIP(v string) *ProxyUpsert {
	u.Set(proxy.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *ProxyUpsert) UpdateIP() *ProxyUpsert {
	u.SetExcluded(proxy.FieldIP)
	return u
}

// SetPort sets the "port" field.
func (u *ProxyUpsert) SetPort(v uint16) *ProxyUpsert {
	u.Set(proxy.FieldPort, v)
	return u
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *ProxyUpsert) UpdatePort() *ProxyUpsert {
	u.SetExcluded(proxy.FieldPort)
	return u
}

// AddPort adds v to the "port" field.
func (u *ProxyUpsert) AddPort(v uint16) *ProxyUpsert {
	u.Add(proxy.FieldPort, v)
	return u
}

// SetUsername sets the "username" field.
func (u *ProxyUpsert) SetUsername(v string) *ProxyUpsert {
	u.Set(proxy.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ProxyUpsert) UpdateUsername() *ProxyUpsert {
	u.SetExcluded(proxy.FieldUsername)
	return u
}

// SetPassword sets the "password" field.
func (u *ProxyUpsert) SetPassword(v string) *ProxyUpsert {
	u.Set(proxy.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *ProxyUpsert) UpdatePassword() *ProxyUpsert {
	u.SetExcluded(proxy.FieldPassword)
	return u
}

// SetRotating sets the "rotating" field.
func (u *ProxyUpsert) SetRotating(v bool) *ProxyUpsert {
	u.Set(proxy.FieldRotating, v)
	return u
}

// UpdateRotating sets the "rotating" field to the value that was provided on create.
func (u *ProxyUpsert) UpdateRotating() *ProxyUpsert {
	u.SetExcluded(proxy.FieldRotating)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Proxy.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProxyUpsertOne) UpdateNewValues() *ProxyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Proxy.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProxyUpsertOne) Ignore() *ProxyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProxyUpsertOne) DoNothing() *ProxyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProxyCreate.OnConflict
// documentation for more info.
func (u *ProxyUpsertOne) Update(set func(*ProxyUpsert)) *ProxyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProxyUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *ProxyUpsertOne) SetType(v proxy.Type) *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ProxyUpsertOne) UpdateType() *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.UpdateType()
	})
}

// SetIP sets the "ip" field.
func (u *ProxyUpsertOne) SetIP(v string) *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *ProxyUpsertOne) UpdateIP() *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.UpdateIP()
	})
}

// SetPort sets the "port" field.
func (u *ProxyUpsertOne) SetPort(v uint16) *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.SetPort(v)
	})
}

// AddPort adds v to the "port" field.
func (u *ProxyUpsertOne) AddPort(v uint16) *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.AddPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *ProxyUpsertOne) UpdatePort() *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.UpdatePort()
	})
}

// SetUsername sets the "username" field.
func (u *ProxyUpsertOne) SetUsername(v string) *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ProxyUpsertOne) UpdateUsername() *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.UpdateUsername()
	})
}

// SetPassword sets the "password" field.
func (u *ProxyUpsertOne) SetPassword(v string) *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *ProxyUpsertOne) UpdatePassword() *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.UpdatePassword()
	})
}

// SetRotating sets the "rotating" field.
func (u *ProxyUpsertOne) SetRotating(v bool) *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.SetRotating(v)
	})
}

// UpdateRotating sets the "rotating" field to the value that was provided on create.
func (u *ProxyUpsertOne) UpdateRotating() *ProxyUpsertOne {
	return u.Update(func(s *ProxyUpsert) {
		s.UpdateRotating()
	})
}

// Exec executes the query.
func (u *ProxyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProxyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProxyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProxyUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProxyUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProxyCreateBulk is the builder for creating many Proxy entities in bulk.
type ProxyCreateBulk struct {
	config
	err      error
	builders []*ProxyCreate
	conflict []sql.ConflictOption
}

// Save creates the Proxy entities in the database.
func (pcb *ProxyCreateBulk) Save(ctx context.Context) ([]*Proxy, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Proxy, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProxyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProxyCreateBulk) SaveX(ctx context.Context) []*Proxy {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProxyCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProxyCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Proxy.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProxyUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProxyCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProxyUpsertBulk {
	pcb.conflict = opts
	return &ProxyUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Proxy.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProxyCreateBulk) OnConflictColumns(columns ...string) *ProxyUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProxyUpsertBulk{
		create: pcb,
	}
}

// ProxyUpsertBulk is the builder for "upsert"-ing
// a bulk of Proxy nodes.
type ProxyUpsertBulk struct {
	create *ProxyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Proxy.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProxyUpsertBulk) UpdateNewValues() *ProxyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Proxy.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProxyUpsertBulk) Ignore() *ProxyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProxyUpsertBulk) DoNothing() *ProxyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProxyCreateBulk.OnConflict
// documentation for more info.
func (u *ProxyUpsertBulk) Update(set func(*ProxyUpsert)) *ProxyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProxyUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *ProxyUpsertBulk) SetType(v proxy.Type) *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ProxyUpsertBulk) UpdateType() *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.UpdateType()
	})
}

// SetIP sets the "ip" field.
func (u *ProxyUpsertBulk) SetIP(v string) *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *ProxyUpsertBulk) UpdateIP() *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.UpdateIP()
	})
}

// SetPort sets the "port" field.
func (u *ProxyUpsertBulk) SetPort(v uint16) *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.SetPort(v)
	})
}

// AddPort adds v to the "port" field.
func (u *ProxyUpsertBulk) AddPort(v uint16) *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.AddPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *ProxyUpsertBulk) UpdatePort() *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.UpdatePort()
	})
}

// SetUsername sets the "username" field.
func (u *ProxyUpsertBulk) SetUsername(v string) *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ProxyUpsertBulk) UpdateUsername() *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.UpdateUsername()
	})
}

// SetPassword sets the "password" field.
func (u *ProxyUpsertBulk) SetPassword(v string) *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *ProxyUpsertBulk) UpdatePassword() *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.UpdatePassword()
	})
}

// SetRotating sets the "rotating" field.
func (u *ProxyUpsertBulk) SetRotating(v bool) *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.SetRotating(v)
	})
}

// UpdateRotating sets the "rotating" field to the value that was provided on create.
func (u *ProxyUpsertBulk) UpdateRotating() *ProxyUpsertBulk {
	return u.Update(func(s *ProxyUpsert) {
		s.UpdateRotating()
	})
}

// Exec executes the query.
func (u *ProxyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProxyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProxyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProxyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
