// Code generated by ent, DO NOT EDIT.

package proxy

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the proxy type in the database.
	Label = "proxy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldRotating holds the string denoting the rotating field in the database.
	FieldRotating = "rotating"
	// Table holds the table name of the proxy in the database.
	Table = "proxies"
)

// Columns holds all SQL columns for proxy fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldIP,
	FieldPort,
	FieldUsername,
	FieldPassword,
	FieldRotating,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRotating holds the default value on creation for the "rotating" field.
	DefaultRotating bool
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeHTTP    Type = "HTTP"
	TypeHTTPS   Type = "HTTPS"
	TypeSOCKS4  Type = "SOCKS4"
	TypeSOCKS5  Type = "SOCKS5"
	TypeSOCKS5H Type = "SOCKS5H"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeHTTP, TypeHTTPS, TypeSOCKS4, TypeSOCKS5, TypeSOCKS5H:
		return nil
	default:
		return fmt.Errorf("proxy: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Proxy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByIP orders the results by the ip field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByPort orders the results by the port field.
func ByPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPort, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByRotating orders the results by the rotating field.
func ByRotating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRotating, opts...).ToFunc()
}
