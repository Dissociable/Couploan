// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dissociable/Couploan/ent/proxy"
	"github.com/Dissociable/Couploan/ent/proxyprovider"
)

// Proxy is the model entity for the Proxy schema.
type Proxy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type proxy.Type `json:"type,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Port holds the value of the "port" field.
	Port uint16 `json:"port,omitempty"`
	// Username holds the value of the "username" field.
	Username *string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password *string `json:"password,omitempty"`
	// Rotating holds the value of the "rotating" field.
	Rotating bool `json:"rotating,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProxyQuery when eager-loading is set.
	Edges                ProxyEdges `json:"edges"`
	proxy_proxy_provider *int
	selectValues         sql.SelectValues
}

// ProxyEdges holds the relations/edges for other nodes in the graph.
type ProxyEdges struct {
	// ProxyProvider holds the value of the proxyProvider edge.
	ProxyProvider *ProxyProvider `json:"proxyProvider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProxyProviderOrErr returns the ProxyProvider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProxyEdges) ProxyProviderOrErr() (*ProxyProvider, error) {
	if e.ProxyProvider != nil {
		return e.ProxyProvider, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: proxyprovider.Label}
	}
	return nil, &NotLoadedError{edge: "proxyProvider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Proxy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case proxy.FieldRotating:
			values[i] = new(sql.NullBool)
		case proxy.FieldID, proxy.FieldPort:
			values[i] = new(sql.NullInt64)
		case proxy.FieldType, proxy.FieldIP, proxy.FieldUsername, proxy.FieldPassword:
			values[i] = new(sql.NullString)
		case proxy.ForeignKeys[0]: // proxy_proxy_provider
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Proxy fields.
func (pr *Proxy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case proxy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case proxy.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pr.Type = proxy.Type(value.String)
			}
		case proxy.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				pr.IP = value.String
			}
		case proxy.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				pr.Port = uint16(value.Int64)
			}
		case proxy.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				pr.Username = new(string)
				*pr.Username = value.String
			}
		case proxy.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				pr.Password = new(string)
				*pr.Password = value.String
			}
		case proxy.FieldRotating:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field rotating", values[i])
			} else if value.Valid {
				pr.Rotating = value.Bool
			}
		case proxy.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field proxy_proxy_provider", value)
			} else if value.Valid {
				pr.proxy_proxy_provider = new(int)
				*pr.proxy_proxy_provider = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Proxy.
// This includes values selected through modifiers, order, etc.
func (pr *Proxy) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryProxyProvider queries the "proxyProvider" edge of the Proxy entity.
func (pr *Proxy) QueryProxyProvider() *ProxyProviderQuery {
	return NewProxyClient(pr.config).QueryProxyProvider(pr)
}

// Update returns a builder for updating this Proxy.
// Note that you need to call Proxy.Unwrap() before calling this method if this Proxy
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Proxy) Update() *ProxyUpdateOne {
	return NewProxyClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Proxy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Proxy) Unwrap() *Proxy {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Proxy is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Proxy) String() string {
	var builder strings.Builder
	builder.WriteString("Proxy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pr.Type))
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(pr.IP)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(fmt.Sprintf("%v", pr.Port))
	builder.WriteString(", ")
	if v := pr.Username; v != nil {
		builder.WriteString("username=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.Password; v != nil {
		builder.WriteString("password=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("rotating=")
	builder.WriteString(fmt.Sprintf("%v", pr.Rotating))
	builder.WriteByte(')')
	return builder.String()
}

// Proxies is a parsable slice of Proxy.
type Proxies []*Proxy
