// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dissociable/Couploan/ent/proxy"
	"github.com/Dissociable/Couploan/ent/proxyprovider"
)

// ProxyProviderCreate is the builder for creating a ProxyProvider entity.
type ProxyProviderCreate struct {
	config
	mutation *ProxyProviderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ppc *ProxyProviderCreate) SetName(s string) *ProxyProviderCreate {
	ppc.mutation.SetName(s)
	return ppc
}

// SetUsername sets the "username" field.
func (ppc *ProxyProviderCreate) SetUsername(s string) *ProxyProviderCreate {
	ppc.mutation.SetUsername(s)
	return ppc
}

// SetPassword sets the "password" field.
func (ppc *ProxyProviderCreate) SetPassword(s string) *ProxyProviderCreate {
	ppc.mutation.SetPassword(s)
	return ppc
}

// SetServiceType sets the "service_type" field.
func (ppc *ProxyProviderCreate) SetServiceType(s string) *ProxyProviderCreate {
	ppc.mutation.SetServiceType(s)
	return ppc
}

// AddProxyIDs adds the "proxy" edge to the Proxy entity by IDs.
func (ppc *ProxyProviderCreate) AddProxyIDs(ids ...int) *ProxyProviderCreate {
	ppc.mutation.AddProxyIDs(ids...)
	return ppc
}

// AddProxy adds the "proxy" edges to the Proxy entity.
func (ppc *ProxyProviderCreate) AddProxy(p ...*Proxy) *ProxyProviderCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppc.AddProxyIDs(ids...)
}

// Mutation returns the ProxyProviderMutation object of the builder.
func (ppc *ProxyProviderCreate) Mutation() *ProxyProviderMutation {
	return ppc.mutation
}

// Save creates the ProxyProvider in the database.
func (ppc *ProxyProviderCreate) Save(ctx context.Context) (*ProxyProvider, error) {
	return withHooks(ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *ProxyProviderCreate) SaveX(ctx context.Context) *ProxyProvider {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *ProxyProviderCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *ProxyProviderCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppc *ProxyProviderCreate) check() error {
	if _, ok := ppc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ProxyProvider.name"`)}
	}
	if _, ok := ppc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "ProxyProvider.username"`)}
	}
	if _, ok := ppc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "ProxyProvider.password"`)}
	}
	if _, ok := ppc.mutation.ServiceType(); !ok {
		return &ValidationError{Name: "service_type", err: errors.New(`ent: missing required field "ProxyProvider.service_type"`)}
	}
	return nil
}

func (ppc *ProxyProviderCreate) sqlSave(ctx context.Context) (*ProxyProvider, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *ProxyProviderCreate) createSpec() (*ProxyProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &ProxyProvider{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(proxyprovider.Table, sqlgraph.NewFieldSpec(proxyprovider.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ppc.conflict
	if value, ok := ppc.mutation.Name(); ok {
		_spec.SetField(proxyprovider.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ppc.mutation.Username(); ok {
		_spec.SetField(proxyprovider.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := ppc.mutation.Password(); ok {
		_spec.SetField(proxyprovider.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := ppc.mutation.ServiceType(); ok {
		_spec.SetField(proxyprovider.FieldServiceType, field.TypeString, value)
		_node.ServiceType = value
	}
	if nodes := ppc.mutation.ProxyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proxyprovider.ProxyTable,
			Columns: []string{proxyprovider.ProxyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProxyProvider.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProxyProviderUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ppc *ProxyProviderCreate) OnConflict(opts ...sql.ConflictOption) *ProxyProviderUpsertOne {
	ppc.conflict = opts
	return &ProxyProviderUpsertOne{
		create: ppc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProxyProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ppc *ProxyProviderCreate) OnConflictColumns(columns ...string) *ProxyProviderUpsertOne {
	ppc.conflict = append(ppc.conflict, sql.ConflictColumns(columns...))
	return &ProxyProviderUpsertOne{
		create: ppc,
	}
}

type (
	// ProxyProviderUpsertOne is the builder for "upsert"-ing
	//  one ProxyProvider node.
	ProxyProviderUpsertOne struct {
		create *ProxyProviderCreate
	}

	// ProxyProviderUpsert is the "OnConflict" setter.
	ProxyProviderUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *ProxyProviderUpsert) SetName(v string) *ProxyProviderUpsert {
	u.Set(proxyprovider.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProxyProviderUpsert) UpdateName() *ProxyProviderUpsert {
	u.SetExcluded(proxyprovider.FieldName)
	return u
}

// SetUsername sets the "username" field.
func (u *ProxyProviderUpsert) SetUsername(v string) *ProxyProviderUpsert {
	u.Set(proxyprovider.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ProxyProviderUpsert) UpdateUsername() *ProxyProviderUpsert {
	u.SetExcluded(proxyprovider.FieldUsername)
	return u
}

// SetPassword sets the "password" field.
func (u *ProxyProviderUpsert) SetPassword(v string) *ProxyProviderUpsert {
	u.Set(proxyprovider.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *ProxyProviderUpsert) UpdatePassword() *ProxyProviderUpsert {
	u.SetExcluded(proxyprovider.FieldPassword)
	return u
}

// SetServiceType sets the "service_type" field.
func (u *ProxyProviderUpsert) SetServiceType(v string) *ProxyProviderUpsert {
	u.Set(proxyprovider.FieldServiceType, v)
	return u
}

// UpdateServiceType sets the "service_type" field to the value that was provided on create.
func (u *ProxyProviderUpsert) UpdateServiceType() *ProxyProviderUpsert {
	u.SetExcluded(proxyprovider.FieldServiceType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ProxyProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProxyProviderUpsertOne) UpdateNewValues() *ProxyProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProxyProvider.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProxyProviderUpsertOne) Ignore() *ProxyProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProxyProviderUpsertOne) DoNothing() *ProxyProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProxyProviderCreate.OnConflict
// documentation for more info.
func (u *ProxyProviderUpsertOne) Update(set func(*ProxyProviderUpsert)) *ProxyProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProxyProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ProxyProviderUpsertOne) SetName(v string) *ProxyProviderUpsertOne {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProxyProviderUpsertOne) UpdateName() *ProxyProviderUpsertOne {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.UpdateName()
	})
}

// SetUsername sets the "username" field.
func (u *ProxyProviderUpsertOne) SetUsername(v string) *ProxyProviderUpsertOne {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ProxyProviderUpsertOne) UpdateUsername() *ProxyProviderUpsertOne {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.UpdateUsername()
	})
}

// SetPassword sets the "password" field.
func (u *ProxyProviderUpsertOne) SetPassword(v string) *ProxyProviderUpsertOne {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *ProxyProviderUpsertOne) UpdatePassword() *ProxyProviderUpsertOne {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.UpdatePassword()
	})
}

// SetServiceType sets the "service_type" field.
func (u *ProxyProviderUpsertOne) SetServiceType(v string) *ProxyProviderUpsertOne {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.SetServiceType(v)
	})
}

// UpdateServiceType sets the "service_type" field to the value that was provided on create.
func (u *ProxyProviderUpsertOne) UpdateServiceType() *ProxyProviderUpsertOne {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.UpdateServiceType()
	})
}

// Exec executes the query.
func (u *ProxyProviderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProxyProviderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProxyProviderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProxyProviderUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProxyProviderUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProxyProviderCreateBulk is the builder for creating many ProxyProvider entities in bulk.
type ProxyProviderCreateBulk struct {
	config
	err      error
	builders []*ProxyProviderCreate
	conflict []sql.ConflictOption
}

// Save creates the ProxyProvider entities in the database.
func (ppcb *ProxyProviderCreateBulk) Save(ctx context.Context) ([]*ProxyProvider, error) {
	if ppcb.err != nil {
		return nil, ppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*ProxyProvider, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProxyProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ppcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *ProxyProviderCreateBulk) SaveX(ctx context.Context) []*ProxyProvider {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *ProxyProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *ProxyProviderCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProxyProvider.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProxyProviderUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ppcb *ProxyProviderCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProxyProviderUpsertBulk {
	ppcb.conflict = opts
	return &ProxyProviderUpsertBulk{
		create: ppcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProxyProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ppcb *ProxyProviderCreateBulk) OnConflictColumns(columns ...string) *ProxyProviderUpsertBulk {
	ppcb.conflict = append(ppcb.conflict, sql.ConflictColumns(columns...))
	return &ProxyProviderUpsertBulk{
		create: ppcb,
	}
}

// ProxyProviderUpsertBulk is the builder for "upsert"-ing
// a bulk of ProxyProvider nodes.
type ProxyProviderUpsertBulk struct {
	create *ProxyProviderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProxyProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProxyProviderUpsertBulk) UpdateNewValues() *ProxyProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProxyProvider.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProxyProviderUpsertBulk) Ignore() *ProxyProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProxyProviderUpsertBulk) DoNothing() *ProxyProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProxyProviderCreateBulk.OnConflict
// documentation for more info.
func (u *ProxyProviderUpsertBulk) Update(set func(*ProxyProviderUpsert)) *ProxyProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProxyProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ProxyProviderUpsertBulk) SetName(v string) *ProxyProviderUpsertBulk {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProxyProviderUpsertBulk) UpdateName() *ProxyProviderUpsertBulk {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.UpdateName()
	})
}

// SetUsername sets the "username" field.
func (u *ProxyProviderUpsertBulk) SetUsername(v string) *ProxyProviderUpsertBulk {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ProxyProviderUpsertBulk) UpdateUsername() *ProxyProviderUpsertBulk {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.UpdateUsername()
	})
}

// SetPassword sets the "password" field.
func (u *ProxyProviderUpsertBulk) SetPassword(v string) *ProxyProviderUpsertBulk {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *ProxyProviderUpsertBulk) UpdatePassword() *ProxyProviderUpsertBulk {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.UpdatePassword()
	})
}

// SetServiceType sets the "service_type" field.
func (u *ProxyProviderUpsertBulk) SetServiceType(v string) *ProxyProviderUpsertBulk {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.SetServiceType(v)
	})
}

// UpdateServiceType sets the "service_type" field to the value that was provided on create.
func (u *ProxyProviderUpsertBulk) UpdateServiceType() *ProxyProviderUpsertBulk {
	return u.Update(func(s *ProxyProviderUpsert) {
		s.UpdateServiceType()
	})
}

// Exec executes the query.
func (u *ProxyProviderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProxyProviderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProxyProviderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProxyProviderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
